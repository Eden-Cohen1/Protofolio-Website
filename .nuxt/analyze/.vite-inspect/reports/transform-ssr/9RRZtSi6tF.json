{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/element-plus/es/components/tree-select/src/tree.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { watch, nextTick, computed, toRefs } from 'vue';\nimport { isEqual, pick } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport _Tree from '../../tree/index.mjs';\nimport component from './tree-select-option.mjs';\nimport { toValidArray, treeFind, isValidValue, treeEach, isValidArray } from './utils.mjs';\nimport { isFunction } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\n\nconst useTree = (props, { attrs, slots, emit }, {\n  select,\n  tree,\n  key\n}) => {\n  watch(() => props.modelValue, () => {\n    if (props.showCheckbox) {\n      nextTick(() => {\n        const treeInstance = tree.value;\n        if (treeInstance && !isEqual(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  const propsMap = computed(() => ({\n    value: key.value,\n    label: \"label\",\n    children: \"children\",\n    disabled: \"disabled\",\n    isLeaf: \"isLeaf\",\n    ...props.props\n  }));\n  const getNodeValByProp = (prop, data) => {\n    var _a;\n    const propVal = propsMap.value[prop];\n    if (isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n  const defaultExpandedParentKeys = toValidArray(props.modelValue).map((value) => {\n    return treeFind(props.data || [], (data) => getNodeValByProp(\"value\", data) === value, (data) => getNodeValByProp(\"children\", data), (data, index, array, parent) => parent && getNodeValByProp(\"value\", parent));\n  }).filter((item) => isValidValue(item));\n  const cacheOptions = computed(() => {\n    if (!props.renderAfterExpand && !props.lazy)\n      return [];\n    const options = [];\n    treeEach(props.data.concat(props.cacheData), (node) => {\n      const value = getNodeValByProp(\"value\", node);\n      options.push({\n        value,\n        currentLabel: getNodeValByProp(\"label\", node),\n        isDisabled: getNodeValByProp(\"disabled\", node)\n      });\n    }, (data) => getNodeValByProp(\"children\", data));\n    return options;\n  });\n  const cacheOptionsMap = computed(() => {\n    return cacheOptions.value.reduce((prev, next) => ({ ...prev, [next.value]: next }), {});\n  });\n  return {\n    ...pick(toRefs(props), Object.keys(_Tree.props)),\n    ...attrs,\n    nodeKey: key,\n    expandOnClickNode: computed(() => {\n      return !props.checkStrictly && props.expandOnClickNode;\n    }),\n    defaultExpandedKeys: computed(() => {\n      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys) : defaultExpandedParentKeys;\n    }),\n    renderContent: (h, { node, data, store }) => {\n      return h(component, {\n        value: getNodeValByProp(\"value\", data),\n        label: getNodeValByProp(\"label\", data),\n        disabled: getNodeValByProp(\"disabled\", data)\n      }, props.renderContent ? () => props.renderContent(h, { node, data, store }) : slots.default ? () => slots.default({ node, data, store }) : void 0);\n    },\n    filterNodeMethod: (value, data, node) => {\n      var _a;\n      if (props.filterNodeMethod)\n        return props.filterNodeMethod(value, data, node);\n      if (!value)\n        return true;\n      return (_a = getNodeValByProp(\"label\", data)) == null ? void 0 : _a.includes(value);\n    },\n    onNodeClick: (data, node, e) => {\n      var _a, _b, _c;\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n      if (props.showCheckbox && props.checkOnClickNode)\n        return;\n      if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {\n        if (!getNodeValByProp(\"disabled\", data)) {\n          const option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option);\n        }\n      } else if (props.expandOnClickNode) {\n        e.proxy.handleExpandIconClick();\n      }\n    },\n    onCheck: (data, params) => {\n      if (!props.showCheckbox)\n        return;\n      const dataValue = getNodeValByProp(\"value\", data);\n      const uncachedCheckedKeys = params.checkedKeys;\n      const cachedKeys = props.multiple ? toValidArray(props.modelValue).filter((item) => item in cacheOptionsMap.value && !tree.value.getNode(item) && !uncachedCheckedKeys.includes(item)) : [];\n      const checkedKeys = uncachedCheckedKeys.concat(cachedKeys);\n      if (props.checkStrictly) {\n        emit(UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(dataValue) ? dataValue : void 0);\n      } else {\n        if (props.multiple) {\n          emit(UPDATE_MODEL_EVENT, tree.value.getCheckedKeys(true));\n        } else {\n          const firstLeaf = treeFind([data], (data2) => !isValidArray(getNodeValByProp(\"children\", data2)) && !getNodeValByProp(\"disabled\", data2), (data2) => getNodeValByProp(\"children\", data2));\n          const firstLeafKey = firstLeaf ? getNodeValByProp(\"value\", firstLeaf) : void 0;\n          const hasCheckedChild = isValidValue(props.modelValue) && !!treeFind([data], (data2) => getNodeValByProp(\"value\", data2) === props.modelValue, (data2) => getNodeValByProp(\"children\", data2));\n          emit(UPDATE_MODEL_EVENT, firstLeafKey === props.modelValue || hasCheckedChild ? void 0 : firstLeafKey);\n        }\n      }\n      nextTick(() => {\n        var _a;\n        const checkedKeys2 = toValidArray(props.modelValue);\n        tree.value.setCheckedKeys(checkedKeys2);\n        (_a = attrs.onCheck) == null ? void 0 : _a.call(attrs, data, {\n          checkedKeys: tree.value.getCheckedKeys(),\n          checkedNodes: tree.value.getCheckedNodes(),\n          halfCheckedKeys: tree.value.getHalfCheckedKeys(),\n          halfCheckedNodes: tree.value.getHalfCheckedNodes()\n        });\n      });\n    },\n    cacheOptions\n  };\n};\n\nexport { useTree };\n//# sourceMappingURL=tree.mjs.map\n",
      "start": 1700406283695,
      "end": 1700406283792,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700406283792,
      "end": 1700406283792,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700406283793,
      "end": 1700406283793,
      "order": "normal"
    }
  ]
}
