{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/element-plus/es/components/virtual-list/src/components/fixed-size-grid.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import '../../../../utils/index.mjs';\nimport createGrid from '../builders/build-grid.mjs';\nimport { AUTO_ALIGNMENT, CENTERED_ALIGNMENT, END_ALIGNMENT, START_ALIGNMENT, SMART_ALIGNMENT } from '../defaults.mjs';\nimport { isNumber } from '../../../../utils/types.mjs';\nimport { throwError } from '../../../../utils/error.mjs';\n\nconst SCOPE = \"ElFixedSizeGrid\";\nconst FixedSizeGrid = createGrid({\n  name: \"ElFixedSizeGrid\",\n  getColumnPosition: ({ columnWidth }, index) => [\n    columnWidth,\n    index * columnWidth\n  ],\n  getRowPosition: ({ rowHeight }, index) => [\n    rowHeight,\n    index * rowHeight\n  ],\n  getEstimatedTotalHeight: ({ totalRow, rowHeight }) => rowHeight * totalRow,\n  getEstimatedTotalWidth: ({ totalColumn, columnWidth }) => columnWidth * totalColumn,\n  getColumnOffset: ({ totalColumn, columnWidth, width }, columnIndex, alignment, scrollLeft, _, scrollBarWidth) => {\n    width = Number(width);\n    const lastColumnOffset = Math.max(0, totalColumn * columnWidth - width);\n    const maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    const minOffset = Math.max(0, columnIndex * columnWidth - width + scrollBarWidth + columnWidth);\n    if (alignment === \"smart\") {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = AUTO_ALIGNMENT;\n      } else {\n        alignment = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (alignment) {\n      case START_ALIGNMENT:\n        return maxOffset;\n      case END_ALIGNMENT:\n        return minOffset;\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0;\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset;\n        } else {\n          return middleOffset;\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getRowOffset: ({ rowHeight, height, totalRow }, rowIndex, align, scrollTop, _, scrollBarWidth) => {\n    height = Number(height);\n    const lastRowOffset = Math.max(0, totalRow * rowHeight - height);\n    const maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    const minOffset = Math.max(0, rowIndex * rowHeight - height + scrollBarWidth + rowHeight);\n    if (align === SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = AUTO_ALIGNMENT;\n      } else {\n        align = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (align) {\n      case START_ALIGNMENT:\n        return maxOffset;\n      case END_ALIGNMENT:\n        return minOffset;\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0;\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset;\n        } else {\n          return middleOffset;\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) => Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth))),\n  getColumnStopIndexForStartIndex: ({ columnWidth, totalColumn, width }, startIndex, scrollLeft) => {\n    const left = startIndex * columnWidth;\n    const visibleColumnsCount = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));\n  },\n  getRowStartIndexForOffset: ({ rowHeight, totalRow }, scrollTop) => Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight))),\n  getRowStopIndexForStartIndex: ({ rowHeight, totalRow, height }, startIndex, scrollTop) => {\n    const top = startIndex * rowHeight;\n    const numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));\n  },\n  initCache: () => void 0,\n  clearCache: true,\n  validateProps: ({ columnWidth, rowHeight }) => {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!isNumber(columnWidth)) {\n        throwError(SCOPE, `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof columnWidth} was given.\n        `);\n      }\n      if (!isNumber(rowHeight)) {\n        throwError(SCOPE, `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof rowHeight} was given.\n        `);\n      }\n    }\n  }\n});\n\nexport { FixedSizeGrid as default };\n//# sourceMappingURL=fixed-size-grid.mjs.map\n",
      "start": 1700406280907,
      "end": 1700406280989,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700406280989,
      "end": 1700406280989,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700406280989,
      "end": 1700406280989,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700406280989,
      "end": 1700406280989,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700406280989,
      "end": 1700406280989,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700406280989,
      "end": 1700406280989,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700406280989,
      "end": 1700406280989,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700406280989,
      "end": 1700406280989,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700406280990,
      "end": 1700406280990,
      "order": "normal"
    }
  ]
}
