{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/element-plus/es/components/time-picker/src/time-picker-com/panel-time-pick.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, inject, ref, computed, openBlock, createBlock, Transition, unref, withCtx, createElementBlock, normalizeClass, createElementVNode, createVNode, toDisplayString, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../constants/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { panelTimePickerProps } from '../props/panel-time-picker.mjs';\nimport { useTimePanel } from '../composables/use-time-panel.mjs';\nimport { buildAvailableTimeSlotGetter, useOldValue } from '../composables/use-time-picker.mjs';\nimport TimeSpinner from './basic-time-spinner.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\n\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  __name: \"panel-time-pick\",\n  props: panelTimePickerProps,\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup(__props, { emit }) {\n    const props = __props;\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue\n    } = pickerBase.props;\n    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds);\n    const ns = useNamespace(\"time\");\n    const { t, lang } = useLocale();\n    const selectionRange = ref([0, 2]);\n    const oldValue = useOldValue(props);\n    const transitionName = computed(() => {\n      return isUndefined(props.actualVisible) ? `${ns.namespace.value}-zoom-in-top` : \"\";\n    });\n    const showSeconds = computed(() => {\n      return props.format.includes(\"ss\");\n    });\n    const amPmMode = computed(() => {\n      if (props.format.includes(\"A\"))\n        return \"A\";\n      if (props.format.includes(\"a\"))\n        return \"a\";\n      return \"\";\n    });\n    const isValidValue = (_date) => {\n      const parsedDate = dayjs(_date).locale(lang.value);\n      const result = getRangeAvailableTime(parsedDate);\n      return parsedDate.isSame(result);\n    };\n    const handleCancel = () => {\n      emit(\"pick\", oldValue.value, false);\n    };\n    const handleConfirm = (visible = false, first = false) => {\n      if (first)\n        return;\n      emit(\"pick\", props.parsedValue, visible);\n    };\n    const handleChange = (_date) => {\n      if (!props.visible) {\n        return;\n      }\n      const result = getRangeAvailableTime(_date).millisecond(0);\n      emit(\"pick\", result, true);\n    };\n    const setSelectionRange = (start, end) => {\n      emit(\"select-range\", start, end);\n      selectionRange.value = [start, end];\n    };\n    const changeSelectionRange = (step) => {\n      const list = [0, 3].concat(showSeconds.value ? [6] : []);\n      const mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      const index = list.indexOf(selectionRange.value[0]);\n      const next = (index + step + list.length) % list.length;\n      timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n    };\n    const handleKeydown = (event) => {\n      const code = event.code;\n      const { left, right, up, down } = EVENT_CODE;\n      if ([left, right].includes(code)) {\n        const step = code === left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n      if ([up, down].includes(code)) {\n        const step = code === up ? -1 : 1;\n        timePickerOptions[\"start_scrollDown\"](step);\n        event.preventDefault();\n        return;\n      }\n    };\n    const { timePickerOptions, onSetOption, getAvailableTime } = useTimePanel({\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    });\n    const getRangeAvailableTime = (date) => {\n      return getAvailableTime(date, props.datetimeRole || \"\", true);\n    };\n    const parseUserInput = (value) => {\n      if (!value)\n        return null;\n      return dayjs(value, props.format).locale(lang.value);\n    };\n    const formatToString = (value) => {\n      if (!value)\n        return null;\n      return value.format(props.format);\n    };\n    const getDefaultValue = () => {\n      return dayjs(defaultValue).locale(lang.value);\n    };\n    emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    emit(\"set-picker-option\", [\"handleKeydownInput\", handleKeydown]);\n    emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Transition, { name: unref(transitionName) }, {\n        default: withCtx(() => [\n          _ctx.actualVisible || _ctx.visible ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            class: normalizeClass(unref(ns).b(\"panel\"))\n          }, [\n            createElementVNode(\"div\", {\n              class: normalizeClass([unref(ns).be(\"panel\", \"content\"), { \"has-seconds\": unref(showSeconds) }])\n            }, [\n              createVNode(TimeSpinner, {\n                ref: \"spinner\",\n                role: _ctx.datetimeRole || \"start\",\n                \"arrow-control\": unref(arrowControl),\n                \"show-seconds\": unref(showSeconds),\n                \"am-pm-mode\": unref(amPmMode),\n                \"spinner-date\": _ctx.parsedValue,\n                \"disabled-hours\": unref(disabledHours),\n                \"disabled-minutes\": unref(disabledMinutes),\n                \"disabled-seconds\": unref(disabledSeconds),\n                onChange: handleChange,\n                onSetOption: unref(onSetOption),\n                onSelectRange: setSelectionRange\n              }, null, 8, [\"role\", \"arrow-control\", \"show-seconds\", \"am-pm-mode\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onSetOption\"])\n            ], 2),\n            createElementVNode(\"div\", {\n              class: normalizeClass(unref(ns).be(\"panel\", \"footer\"))\n            }, [\n              createElementVNode(\"button\", {\n                type: \"button\",\n                class: normalizeClass([unref(ns).be(\"panel\", \"btn\"), \"cancel\"]),\n                onClick: handleCancel\n              }, toDisplayString(unref(t)(\"el.datepicker.cancel\")), 3),\n              createElementVNode(\"button\", {\n                type: \"button\",\n                class: normalizeClass([unref(ns).be(\"panel\", \"btn\"), \"confirm\"]),\n                onClick: _cache[0] || (_cache[0] = ($event) => handleConfirm())\n              }, toDisplayString(unref(t)(\"el.datepicker.confirm\")), 3)\n            ], 2)\n          ], 2)) : createCommentVNode(\"v-if\", true)\n        ]),\n        _: 1\n      }, 8, [\"name\"]);\n    };\n  }\n});\nvar TimePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-pick.vue\"]]);\n\nexport { TimePickPanel as default };\n//# sourceMappingURL=panel-time-pick.mjs.map\n",
      "start": 1700494463782,
      "end": 1700494463891,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700494463891,
      "end": 1700494463891,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700494463892,
      "end": 1700494463892,
      "order": "normal"
    }
  ]
}
