{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/lodash-es/_mergeData.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import composeArgs from './_composeArgs.js';\nimport composeArgsRight from './_composeArgsRight.js';\nimport replaceHolders from './_replaceHolders.js';\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nexport default mergeData;\n",
      "start": 1700406276207,
      "end": 1700406276271,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700406276271,
      "end": 1700406276271,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700406276272,
      "end": 1700406276272,
      "order": "normal"
    }
  ]
}
