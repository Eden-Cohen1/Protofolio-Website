{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/element-plus/es/components/date-picker/src/composables/use-range-picker.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getCurrentInstance, inject, ref, unref, watch } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { isValidRange, getDefaultValue } from '../utils.mjs';\nimport { ROOT_PICKER_INJECTION_KEY } from '../constants.mjs';\nimport { useShortcut } from './use-shortcut.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { isArray } from '@vue/shared';\n\nconst useRangePicker = (props, {\n  defaultValue,\n  leftDate,\n  rightDate,\n  unit,\n  onParsedValueChanged\n}) => {\n  const { emit } = getCurrentInstance();\n  const { pickerNs } = inject(ROOT_PICKER_INJECTION_KEY);\n  const drpNs = useNamespace(\"date-range-picker\");\n  const { t, lang } = useLocale();\n  const handleShortcutClick = useShortcut(lang);\n  const minDate = ref();\n  const maxDate = ref();\n  const rangeState = ref({\n    endDate: null,\n    selecting: false\n  });\n  const handleChangeRange = (val) => {\n    rangeState.value = val;\n  };\n  const handleRangeConfirm = (visible = false) => {\n    const _minDate = unref(minDate);\n    const _maxDate = unref(maxDate);\n    if (isValidRange([_minDate, _maxDate])) {\n      emit(\"pick\", [_minDate, _maxDate], visible);\n    }\n  };\n  const onSelect = (selecting) => {\n    rangeState.value.selecting = selecting;\n    if (!selecting) {\n      rangeState.value.endDate = null;\n    }\n  };\n  const restoreDefault = () => {\n    const [start, end] = getDefaultValue(unref(defaultValue), {\n      lang: unref(lang),\n      unit,\n      unlinkPanels: props.unlinkPanels\n    });\n    minDate.value = void 0;\n    maxDate.value = void 0;\n    leftDate.value = start;\n    rightDate.value = end;\n  };\n  watch(defaultValue, (val) => {\n    if (val) {\n      restoreDefault();\n    }\n  }, { immediate: true });\n  watch(() => props.parsedValue, (parsedValue) => {\n    if (isArray(parsedValue) && parsedValue.length === 2) {\n      const [start, end] = parsedValue;\n      minDate.value = start;\n      leftDate.value = start;\n      maxDate.value = end;\n      onParsedValueChanged(unref(minDate), unref(maxDate));\n    } else {\n      restoreDefault();\n    }\n  }, { immediate: true });\n  return {\n    minDate,\n    maxDate,\n    rangeState,\n    lang,\n    ppNs: pickerNs,\n    drpNs,\n    handleChangeRange,\n    handleRangeConfirm,\n    handleShortcutClick,\n    onSelect,\n    t\n  };\n};\n\nexport { useRangePicker };\n//# sourceMappingURL=use-range-picker.mjs.map\n",
      "start": 1700494468921,
      "end": 1700494469050,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700494469050,
      "end": 1700494469050,
      "order": "normal"
    }
  ]
}
