{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/element-plus/es/components/table/src/config.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { h } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowRight, Loading } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport { getProp } from '../../../utils/objects.mjs';\n\nconst defaultClassNames = {\n  selection: \"table-column--selection\",\n  expand: \"table__expand-column\"\n};\nconst cellStarts = {\n  default: {\n    order: \"\"\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  }\n};\nconst getDefaultClassName = (type) => {\n  return defaultClassNames[type] || \"\";\n};\nconst cellForced = {\n  selection: {\n    renderHeader({ store, column }) {\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0;\n      }\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate: store.states.selection.value.length > 0 && !store.states.isAllSelected.value,\n        \"onUpdate:modelValue\": store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value,\n        ariaLabel: column.label\n      });\n    },\n    renderCell({\n      row,\n      column,\n      store,\n      $index\n    }) {\n      return h(ElCheckbox, {\n        disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,\n        size: store.states.tableSize.value,\n        onChange: () => {\n          store.commit(\"rowSelectedChanged\", row);\n        },\n        onClick: (event) => event.stopPropagation(),\n        modelValue: store.isSelected(row),\n        ariaLabel: column.label\n      });\n    },\n    sortable: false,\n    resizable: false\n  },\n  index: {\n    renderHeader({ column }) {\n      return column.label || \"#\";\n    },\n    renderCell({\n      column,\n      $index\n    }) {\n      let i = $index + 1;\n      const index = column.index;\n      if (typeof index === \"number\") {\n        i = $index + index;\n      } else if (typeof index === \"function\") {\n        i = index($index);\n      }\n      return h(\"div\", {}, [i]);\n    },\n    sortable: false\n  },\n  expand: {\n    renderHeader({ column }) {\n      return column.label || \"\";\n    },\n    renderCell({\n      row,\n      store,\n      expanded\n    }) {\n      const { ns } = store;\n      const classes = [ns.e(\"expand-icon\")];\n      if (expanded) {\n        classes.push(ns.em(\"expand-icon\", \"expanded\"));\n      }\n      const callback = function(e) {\n        e.stopPropagation();\n        store.toggleRowExpansion(row);\n      };\n      return h(\"div\", {\n        class: classes,\n        onClick: callback\n      }, {\n        default: () => {\n          return [\n            h(ElIcon, null, {\n              default: () => {\n                return [h(ArrowRight)];\n              }\n            })\n          ];\n        }\n      });\n    },\n    sortable: false,\n    resizable: false\n  }\n};\nfunction defaultRenderCell({\n  row,\n  column,\n  $index\n}) {\n  var _a;\n  const property = column.property;\n  const value = property && getProp(row, property).value;\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index);\n  }\n  return ((_a = value == null ? void 0 : value.toString) == null ? void 0 : _a.call(value)) || \"\";\n}\nfunction treeCellPrefix({\n  row,\n  treeNode,\n  store\n}, createPlaceholder = false) {\n  const { ns } = store;\n  if (!treeNode) {\n    if (createPlaceholder) {\n      return [\n        h(\"span\", {\n          class: ns.e(\"placeholder\")\n        })\n      ];\n    }\n    return null;\n  }\n  const ele = [];\n  const callback = function(e) {\n    e.stopPropagation();\n    if (treeNode.loading) {\n      return;\n    }\n    store.loadOrToggle(row);\n  };\n  if (treeNode.indent) {\n    ele.push(h(\"span\", {\n      class: ns.e(\"indent\"),\n      style: { \"padding-left\": `${treeNode.indent}px` }\n    }));\n  }\n  if (typeof treeNode.expanded === \"boolean\" && !treeNode.noLazyChildren) {\n    const expandClasses = [\n      ns.e(\"expand-icon\"),\n      treeNode.expanded ? ns.em(\"expand-icon\", \"expanded\") : \"\"\n    ];\n    let icon = ArrowRight;\n    if (treeNode.loading) {\n      icon = Loading;\n    }\n    ele.push(h(\"div\", {\n      class: expandClasses,\n      onClick: callback\n    }, {\n      default: () => {\n        return [\n          h(ElIcon, { class: { [ns.is(\"loading\")]: treeNode.loading } }, {\n            default: () => [h(icon)]\n          })\n        ];\n      }\n    }));\n  } else {\n    ele.push(h(\"span\", {\n      class: ns.e(\"placeholder\")\n    }));\n  }\n  return ele;\n}\n\nexport { cellForced, cellStarts, defaultRenderCell, getDefaultClassName, treeCellPrefix };\n//# sourceMappingURL=config.mjs.map\n",
      "start": 1700494466894,
      "end": 1700494466963,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700494466963,
      "end": 1700494466963,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700494466964,
      "end": 1700494466964,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700494466964,
      "end": 1700494466964,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700494466964,
      "end": 1700494466964,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700494466964,
      "end": 1700494466964,
      "order": "normal"
    }
  ]
}
