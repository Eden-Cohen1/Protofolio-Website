{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/element-plus/es/hooks/use-model-toggle/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getCurrentInstance, computed, watch, onMounted } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport '../../utils/index.mjs';\nimport { buildProp, definePropType } from '../../utils/vue/props/runtime.mjs';\nimport { isClient } from '@vueuse/core';\nimport { isBoolean } from '../../utils/types.mjs';\n\nconst _prop = buildProp({\n  type: definePropType(Boolean),\n  default: null\n});\nconst _event = buildProp({\n  type: definePropType(Function)\n});\nconst createModelToggleComposable = (name) => {\n  const updateEventKey = `update:${name}`;\n  const updateEventKeyRaw = `onUpdate:${name}`;\n  const useModelToggleEmits2 = [updateEventKey];\n  const useModelToggleProps2 = {\n    [name]: _prop,\n    [updateEventKeyRaw]: _event\n  };\n  const useModelToggle2 = ({\n    indicator,\n    toggleReason,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide\n  }) => {\n    const instance = getCurrentInstance();\n    const { emit } = instance;\n    const props = instance.props;\n    const hasUpdateHandler = computed(() => isFunction(props[updateEventKeyRaw]));\n    const isModelBindingAbsent = computed(() => props[name] === null);\n    const doShow = (event) => {\n      if (indicator.value === true) {\n        return;\n      }\n      indicator.value = true;\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n      if (isFunction(onShow)) {\n        onShow(event);\n      }\n    };\n    const doHide = (event) => {\n      if (indicator.value === false) {\n        return;\n      }\n      indicator.value = false;\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n      if (isFunction(onHide)) {\n        onHide(event);\n      }\n    };\n    const show = (event) => {\n      if (props.disabled === true || isFunction(shouldProceed) && !shouldProceed())\n        return;\n      const shouldEmit = hasUpdateHandler.value && isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, true);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event);\n      }\n    };\n    const hide = (event) => {\n      if (props.disabled === true || !isClient)\n        return;\n      const shouldEmit = hasUpdateHandler.value && isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, false);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event);\n      }\n    };\n    const onChange = (val) => {\n      if (!isBoolean(val))\n        return;\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false);\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow();\n        } else {\n          doHide();\n        }\n      }\n    };\n    const toggle = () => {\n      if (indicator.value) {\n        hide();\n      } else {\n        show();\n      }\n    };\n    watch(() => props[name], onChange);\n    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n      watch(() => ({\n        ...instance.proxy.$route\n      }), () => {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide();\n        }\n      });\n    }\n    onMounted(() => {\n      onChange(props[name]);\n    });\n    return {\n      hide,\n      show,\n      toggle,\n      hasUpdateHandler\n    };\n  };\n  return {\n    useModelToggle: useModelToggle2,\n    useModelToggleProps: useModelToggleProps2,\n    useModelToggleEmits: useModelToggleEmits2\n  };\n};\nconst { useModelToggle, useModelToggleProps, useModelToggleEmits } = createModelToggleComposable(\"modelValue\");\n\nexport { createModelToggleComposable, useModelToggle, useModelToggleEmits, useModelToggleProps };\n//# sourceMappingURL=index.mjs.map\n",
      "start": 1700439439808,
      "end": 1700439439869,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700439439869,
      "end": 1700439439869,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700439439870,
      "end": 1700439439870,
      "order": "normal"
    }
  ]
}
