{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/lodash-es/_baseIsEqualDeep.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n",
      "start": 1700439444434,
      "end": 1700439444467,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700439444467,
      "end": 1700439444467,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700439444467,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700439444468,
      "end": 1700439444468,
      "order": "normal"
    }
  ]
}
