{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/element-plus/es/components/tree-v2/src/composables/useTree.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, shallowRef, watch, computed, nextTick } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { TreeOptionsEnum, NODE_CLICK, CURRENT_CHANGE, NODE_EXPAND, NODE_COLLAPSE } from '../virtual-tree.mjs';\nimport { useCheck } from './useCheck.mjs';\nimport { useFilter } from './useFilter.mjs';\nimport { isObject } from '@vue/shared';\n\nfunction useTree(props, emit) {\n  const expandedKeySet = ref(new Set(props.defaultExpandedKeys));\n  const currentKey = ref();\n  const tree = shallowRef();\n  watch(() => props.currentNodeKey, (key) => {\n    currentKey.value = key;\n  }, {\n    immediate: true\n  });\n  watch(() => props.data, (data) => {\n    setData(data);\n  }, {\n    immediate: true\n  });\n  const {\n    isIndeterminate,\n    isChecked,\n    toggleCheckbox,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  } = useCheck(props, tree);\n  const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(props, tree);\n  const valueKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.value) || TreeOptionsEnum.KEY;\n  });\n  const childrenKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.children) || TreeOptionsEnum.CHILDREN;\n  });\n  const disabledKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.disabled) || TreeOptionsEnum.DISABLED;\n  });\n  const labelKey = computed(() => {\n    var _a;\n    return ((_a = props.props) == null ? void 0 : _a.label) || TreeOptionsEnum.LABEL;\n  });\n  const flattenTree = computed(() => {\n    const expandedKeys = expandedKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const flattenNodes = [];\n    const nodes = tree.value && tree.value.treeNodes || [];\n    function traverse() {\n      const stack = [];\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        stack.push(nodes[i]);\n      }\n      while (stack.length) {\n        const node = stack.pop();\n        if (!node)\n          continue;\n        if (!hiddenKeys.has(node.key)) {\n          flattenNodes.push(node);\n        }\n        if (expandedKeys.has(node.key)) {\n          const children = node.children;\n          if (children) {\n            const length = children.length;\n            for (let i = length - 1; i >= 0; --i) {\n              stack.push(children[i]);\n            }\n          }\n        }\n      }\n    }\n    traverse();\n    return flattenNodes;\n  });\n  const isNotEmpty = computed(() => {\n    return flattenTree.value.length > 0;\n  });\n  function createTree(data) {\n    const treeNodeMap = /* @__PURE__ */ new Map();\n    const levelTreeNodeMap = /* @__PURE__ */ new Map();\n    let maxLevel = 1;\n    function traverse(nodes, level = 1, parent = void 0) {\n      var _a;\n      const siblings = [];\n      for (const rawNode of nodes) {\n        const value = getKey(rawNode);\n        const node = {\n          level,\n          key: value,\n          data: rawNode\n        };\n        node.label = getLabel(rawNode);\n        node.parent = parent;\n        const children = getChildren(rawNode);\n        node.disabled = getDisabled(rawNode);\n        node.isLeaf = !children || children.length === 0;\n        if (children && children.length) {\n          node.children = traverse(children, level + 1, node);\n        }\n        siblings.push(node);\n        treeNodeMap.set(value, node);\n        if (!levelTreeNodeMap.has(level)) {\n          levelTreeNodeMap.set(level, []);\n        }\n        (_a = levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);\n      }\n      if (level > maxLevel) {\n        maxLevel = level;\n      }\n      return siblings;\n    }\n    const treeNodes = traverse(data);\n    return {\n      treeNodeMap,\n      levelTreeNodeMap,\n      maxLevel,\n      treeNodes\n    };\n  }\n  function filter(query) {\n    const keys = doFilter(query);\n    if (keys) {\n      expandedKeySet.value = keys;\n    }\n  }\n  function getChildren(node) {\n    return node[childrenKey.value];\n  }\n  function getKey(node) {\n    if (!node) {\n      return \"\";\n    }\n    return node[valueKey.value];\n  }\n  function getDisabled(node) {\n    return node[disabledKey.value];\n  }\n  function getLabel(node) {\n    return node[labelKey.value];\n  }\n  function toggleExpand(node) {\n    const expandedKeys = expandedKeySet.value;\n    if (expandedKeys.has(node.key)) {\n      collapseNode(node);\n    } else {\n      expandNode(node);\n    }\n  }\n  function setExpandedKeys(keys) {\n    expandedKeySet.value = new Set(keys);\n  }\n  function handleNodeClick(node, e) {\n    emit(NODE_CLICK, node.data, node, e);\n    handleCurrentChange(node);\n    if (props.expandOnClickNode) {\n      toggleExpand(node);\n    }\n    if (props.showCheckbox && props.checkOnClickNode && !node.disabled) {\n      toggleCheckbox(node, !isChecked(node), true);\n    }\n  }\n  function handleCurrentChange(node) {\n    if (!isCurrent(node)) {\n      currentKey.value = node.key;\n      emit(CURRENT_CHANGE, node.data, node);\n    }\n  }\n  function handleNodeCheck(node, checked) {\n    toggleCheckbox(node, checked);\n  }\n  function expandNode(node) {\n    const keySet = expandedKeySet.value;\n    if (tree.value && props.accordion) {\n      const { treeNodeMap } = tree.value;\n      keySet.forEach((key) => {\n        const treeNode = treeNodeMap.get(key);\n        if (node && node.level === (treeNode == null ? void 0 : treeNode.level)) {\n          keySet.delete(key);\n        }\n      });\n    }\n    keySet.add(node.key);\n    emit(NODE_EXPAND, node.data, node);\n  }\n  function collapseNode(node) {\n    expandedKeySet.value.delete(node.key);\n    emit(NODE_COLLAPSE, node.data, node);\n  }\n  function isExpanded(node) {\n    return expandedKeySet.value.has(node.key);\n  }\n  function isDisabled(node) {\n    return !!node.disabled;\n  }\n  function isCurrent(node) {\n    const current = currentKey.value;\n    return current !== void 0 && current === node.key;\n  }\n  function getCurrentNode() {\n    var _a, _b;\n    if (!currentKey.value)\n      return void 0;\n    return (_b = (_a = tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;\n  }\n  function getCurrentKey() {\n    return currentKey.value;\n  }\n  function setCurrentKey(key) {\n    currentKey.value = key;\n  }\n  function setData(data) {\n    nextTick(() => tree.value = createTree(data));\n  }\n  function getNode(data) {\n    var _a;\n    const key = isObject(data) ? getKey(data) : data;\n    return (_a = tree.value) == null ? void 0 : _a.treeNodeMap.get(key);\n  }\n  return {\n    tree,\n    flattenTree,\n    isNotEmpty,\n    getKey,\n    getChildren,\n    toggleExpand,\n    toggleCheckbox,\n    isExpanded,\n    isChecked,\n    isIndeterminate,\n    isDisabled,\n    isCurrent,\n    isForceHiddenExpandIcon,\n    handleNodeClick,\n    handleNodeCheck,\n    getCurrentNode,\n    getCurrentKey,\n    setCurrentKey,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n    filter,\n    setData,\n    getNode,\n    expandNode,\n    collapseNode,\n    setExpandedKeys\n  };\n}\n\nexport { useTree };\n//# sourceMappingURL=useTree.mjs.map\n",
      "start": 1700439442513,
      "end": 1700439442602,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700439442602,
      "end": 1700439442602,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700439442602,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700439442603,
      "end": 1700439442603,
      "order": "normal"
    }
  ]
}
