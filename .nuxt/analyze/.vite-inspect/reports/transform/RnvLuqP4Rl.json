{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/element-plus/es/components/message-box/src/messageBox.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode, isVNode, render } from 'vue';\nimport '../../../utils/index.mjs';\nimport MessageBoxConstructor from './index.mjs';\nimport { isString, isFunction, hasOwn, isObject } from '@vue/shared';\nimport { isElement, isUndefined } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isClient } from '@vueuse/core';\n\nconst messageInstance = /* @__PURE__ */ new Map();\nconst getAppendToElement = (props) => {\n  let appendTo = document.body;\n  if (props.appendTo) {\n    if (isString(props.appendTo)) {\n      appendTo = document.querySelector(props.appendTo);\n    }\n    if (isElement(props.appendTo)) {\n      appendTo = props.appendTo;\n    }\n    if (!isElement(appendTo)) {\n      debugWarn(\"ElMessageBox\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n      appendTo = document.body;\n    }\n  }\n  return appendTo;\n};\nconst initInstance = (props, container, appContext = null) => {\n  const vnode = createVNode(MessageBoxConstructor, props, isFunction(props.message) || isVNode(props.message) ? {\n    default: isFunction(props.message) ? props.message : () => props.message\n  } : null);\n  vnode.appContext = appContext;\n  render(vnode, container);\n  getAppendToElement(props).appendChild(container.firstElementChild);\n  return vnode.component;\n};\nconst genContainer = () => {\n  return document.createElement(\"div\");\n};\nconst showMessage = (options, appContext) => {\n  const container = genContainer();\n  options.onVanish = () => {\n    render(null, container);\n    messageInstance.delete(vm);\n  };\n  options.onAction = (action) => {\n    const currentMsg = messageInstance.get(vm);\n    let resolve;\n    if (options.showInput) {\n      resolve = { value: vm.inputValue, action };\n    } else {\n      resolve = action;\n    }\n    if (options.callback) {\n      options.callback(resolve, instance.proxy);\n    } else {\n      if (action === \"cancel\" || action === \"close\") {\n        if (options.distinguishCancelAndClose && action !== \"cancel\") {\n          currentMsg.reject(\"close\");\n        } else {\n          currentMsg.reject(\"cancel\");\n        }\n      } else {\n        currentMsg.resolve(resolve);\n      }\n    }\n  };\n  const instance = initInstance(options, container, appContext);\n  const vm = instance.proxy;\n  for (const prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop] = options[prop];\n    }\n  }\n  vm.visible = true;\n  return vm;\n};\nfunction MessageBox(options, appContext = null) {\n  if (!isClient)\n    return Promise.reject();\n  let callback;\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  } else {\n    callback = options.callback;\n  }\n  return new Promise((resolve, reject) => {\n    const vm = showMessage(options, appContext != null ? appContext : MessageBox._context);\n    messageInstance.set(vm, {\n      options,\n      callback,\n      resolve,\n      reject\n    });\n  });\n}\nconst MESSAGE_BOX_VARIANTS = [\"alert\", \"confirm\", \"prompt\"];\nconst MESSAGE_BOX_DEFAULT_OPTS = {\n  alert: { closeOnPressEscape: false, closeOnClickModal: false },\n  confirm: { showCancelButton: true },\n  prompt: { showCancelButton: true, showInput: true }\n};\nMESSAGE_BOX_VARIANTS.forEach((boxType) => {\n  ;\n  MessageBox[boxType] = messageBoxFactory(boxType);\n});\nfunction messageBoxFactory(boxType) {\n  return (message, title, options, appContext) => {\n    let titleOrOpts = \"\";\n    if (isObject(title)) {\n      options = title;\n      titleOrOpts = \"\";\n    } else if (isUndefined(title)) {\n      titleOrOpts = \"\";\n    } else {\n      titleOrOpts = title;\n    }\n    return MessageBox(Object.assign({\n      title: titleOrOpts,\n      message,\n      type: \"\",\n      ...MESSAGE_BOX_DEFAULT_OPTS[boxType]\n    }, options, {\n      boxType\n    }), appContext);\n  };\n}\nMessageBox.close = () => {\n  messageInstance.forEach((_, vm) => {\n    vm.doClose();\n  });\n  messageInstance.clear();\n};\nMessageBox._context = null;\n\nexport { MessageBox as default };\n//# sourceMappingURL=messageBox.mjs.map\n",
      "start": 1700439441448,
      "end": 1700439441602,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700439441602,
      "end": 1700439441602,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700439441602,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700439441603,
      "end": 1700439441603,
      "order": "normal"
    }
  ]
}
