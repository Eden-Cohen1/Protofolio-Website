{
  "resolvedId": "C:/Users/eden7/Protofolio-Website/Protofolio-Website/node_modules/lodash-es/bindKey.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import baseRest from './_baseRest.js';\nimport createWrap from './_createWrap.js';\nimport getHolder from './_getHolder.js';\nimport replaceHolders from './_replaceHolders.js';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes the method at `object[key]` with `partials`\n * prepended to the arguments it receives.\n *\n * This method differs from `_.bind` by allowing bound functions to reference\n * methods that may be redefined or don't yet exist. See\n * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n * for more details.\n *\n * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Function\n * @param {Object} object The object to invoke the method on.\n * @param {string} key The key of the method.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new bound function.\n * @example\n *\n * var object = {\n *   'user': 'fred',\n *   'greet': function(greeting, punctuation) {\n *     return greeting + ' ' + this.user + punctuation;\n *   }\n * };\n *\n * var bound = _.bindKey(object, 'greet', 'hi');\n * bound('!');\n * // => 'hi fred!'\n *\n * object.greet = function(greeting, punctuation) {\n *   return greeting + 'ya ' + this.user + punctuation;\n * };\n *\n * bound('!');\n * // => 'hiya fred!'\n *\n * // Bound with placeholders.\n * var bound = _.bindKey(object, 'greet', _, '!');\n * bound('hi');\n * // => 'hiya fred!'\n */\nvar bindKey = baseRest(function(object, key, partials) {\n  var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n  if (partials.length) {\n    var holders = replaceHolders(partials, getHolder(bindKey));\n    bitmask |= WRAP_PARTIAL_FLAG;\n  }\n  return createWrap(key, bitmask, object, partials, holders);\n});\n\n// Assign default placeholders.\nbindKey.placeholder = {};\n\nexport default bindKey;\n",
      "start": 1700494467449,
      "end": 1700494467505,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700494467505,
      "end": 1700494467505,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700494467505,
      "end": 1700494467505,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700494467505,
      "end": 1700494467505,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700494467505,
      "end": 1700494467505,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700494467505,
      "end": 1700494467505,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700494467505,
      "end": 1700494467505,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700494467505,
      "end": 1700494467505,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700494467505,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700494467506,
      "end": 1700494467506,
      "order": "normal"
    }
  ]
}
