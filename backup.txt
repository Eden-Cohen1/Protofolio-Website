<template>
  <main ref="screenWidth">
    <el-affix :offset="isMobile ? 100 : 0">
      <el-menu
        class="main-color"
        :mode="isMobile ? 'vertical' : 'horizontal'"
        active-text-color="#303133"
        ref="myMenu"
      >
        <el-menu-item index="home" id="home">
          <a href="#home">Home</a>
        </el-menu-item>
        <el-menu-item index="about">
          <a href="#about">About</a>
        </el-menu-item>
        <el-menu-item index="projects">
          <a href="#projects">Projects</a>
        </el-menu-item>
        <el-menu-item index="skills">
          <a href="#skills">Skills</a>
        </el-menu-item>
        <el-menu-item index="contact">
          <a href="#contact">Contact</a>
        </el-menu-item>
        <el-button class="themeBtn" @click="toggleDarkMode"
          >Dark Mode</el-button
        >
      </el-menu>
    </el-affix>
    <slot />
  </main>
</template>

<script setup>
const myMenu = ref();
const screenWidth = ref();
// const handleNavbar = () => {
//   screenWidth.value = window.innerWidth;
//   myMenu.value.$el.classList.toggle("sidebar", isMobile.value);
// };
// onMounted(() => {
//   // screenWidth.value = window.innerWidth;
//   // window.addEventListener("resize", handleNavbar);
//   // handleNavbar();
//   console.log(screenWidth.value.offsetWidth);
// });
const isMobile = computed(() => {
  console.log(screenWidth.value?.offsetWidth);
  return screenWidth.value?.offsetWidth <= 680;
});
// watch(
//   screenWidth.value?.offsetWidth,
//   (newValue) => {
//     console.log(newValue.offsetWidth);
//     console.log(newValue);
//   },
//   { imidiate: true, deep: true }
// );
const darkMode = ref(false);
const toggleDarkMode = () => {
  darkMode.value = !darkMode.value;
  document.documentElement.classList.toggle("dark", darkMode.value);
};
</script>

<style>
a {
  text-decoration: none;
  color: black;
}
.is-active {
  background-color: transparent !important;
  border-bottom: none !important;
}
.sidebar {
  position: sticky;
  top: 40px;
  border-radius: 1rem;
  width: 100px !important;
}
.sidebar el-menu-item {
  border-radius: 1rem;
  background-color: black !important;
}
.themeBtn {
  margin-top: 12px;
  width: 100px;
}
</style>


watch(
  Swidth.value,
  (newValue) => {
    if (newValue <= 680) {
      console.log(newValue);
    }
  },
  { deep: true, immediate: true }
);




const screenSize = ref();
const Swidth = ref();
// const screenWidth = ref();

// onMounted(() => {
//   screenWidth?.value = window.innerWidth;
// });
// // const isMobile = computed(() => {
// //   return screenWidth?.value <= 680;
// // });
onMounted(() => {
  Swidth.value = window.innerHeight;
  console.log(Swidth.value);
});


-------------------------------------------------------------------------------------------

<template>
  <main class="main-color section my-hero wave">
    <div class="avatar">
      <NuxtImg src="me.jpg" alt="" />
    </div>
    <h1>{{ heroText.selfTypedText }}</h1>
    <h2>{{ heroText.selfTypedText2 }}</h2>
  </main>
</template>

<script setup>
const heroText = reactive({
  headline:
    "Hello, my name is Eden Cohen\n A Compuer-Science student and a Full-stack developer.",
  selfTypedText: "",
  selfTypedText2: "",
});

const typeText = () => {
  for (let i = 0; i < heroText.headline.length; i++) {
    setTimeout(
      () => {
        if (i <= heroText.headline.indexOf("\n")) {
          heroText.selfTypedText += heroText.headline[i];
        } else {
          heroText.selfTypedText2 += heroText.headline[i];
        }
      },
      45 * i,
      i
    );
  }
};

onMounted(() => {
  typeText();
});
</script>

<style scoped>
.my-hero {
  display: flex;
  flex-direction: column;
  height: 80vh;
}

.avatar {
  width: 150px;
  height: 150px;
  box-sizing: border-box;
  border: 5px white solid;
  border-radius: 50%;
  overflow: hidden;
  box-shadow: 0 5px 15px 0px rgba(0, 0, 0, 0.6);
  transform: translatey(0px);
  animation: float 4.5s ease-in-out infinite, dropImage 3s;
  animation-delay: 3s, 0s;
  margin-bottom: 1rem;
}
img {
  width: 100%;
  height: auto;
}
.dark .avatar {
  box-shadow: 0 5px 15px 0px rgba(255, 255, 255, 0.322) !important;
}
h2 {
  text-align: center;
  line-height: 2;
  margin: 0;
}
</style>

---------------------------------------ANIMATIONS-------------------------------

@keyframes float {
  0% {
    box-shadow: 0 5px 15px 0px rgba(0, 0, 0, 0.6);
    transform: translatey(0px);
  }
  50% {
    box-shadow: 0 25px 15px 0px rgba(0, 0, 0, 0.2);
    transform: translatey(-20px);
  }
  100% {
    box-shadow: 0 5px 15px 0px rgba(0, 0, 0, 0.6);
    transform: translatey(0px);
  }
}

/* ================= WAVE BORDER ================== */

.wave {
  position: relative;
  border: none !important;
}
.wave::before {
  content: "";
  position: absolute;
  left: 0;
  bottom: 0;
  right: 0;
  background-repeat: repeat;
  height: 10px;
  background-size: 20px 20px;
  background-image: radial-gradient(
    circle at 10px -5px,
    transparent 12px,
    var(--light-bg-sec) 13px
  );
}
.wave::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: 0;
  right: 0;
  background-repeat: repeat;
  height: 15px;
  background-size: 40px 20px;
  background-image: radial-gradient(
    circle at 10px 15px,
    var(--light-bg-sec) 12px,
    transparent 13px
  );
}

.dark .wave::before {
  background-image: radial-gradient(
    circle at 10px -5px,
    transparent 12px,
    var(--dark-bg-sec) 13px
  );
}
.dark .wave::after {
  background-image: radial-gradient(
    circle at 10px 15px,
    var(--dark-bg-sec) 12px,
    transparent 13px
  );
}